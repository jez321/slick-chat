{"version":3,"sources":["redux/app/appReducer.ts","redux/app/actions.ts","redux/chat/chatReducer.ts","redux/rootReducer.ts","redux/store.ts","App.styles.ts","styles/Variables.ts","components/ChatInput/ChatInput.styles.ts","components/SlickButton/SlickButton.styles.ts","components/ChatInput/ChatInput.component.tsx","components/SlickButton/SlickButton.component.tsx","components/ChatHistory/ChatHistory.styles.ts","components/ChatHistory/ChatMessage/ChatMessage.styles.ts","components/ChatHistory/ChatMessage/ChatMessage.component.tsx","components/ChatHistory/ChatHistory.component.tsx","components/SetUser/SetUser.styles.ts","components/SetUser/SetUser.component.tsx","App.tsx","index.tsx"],"names":["initialState","user","appReducer","state","action","type","messages","chatReducer","rootReducer","combineReducers","app","chat","firebase","firebaseReducer","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","createStore","applyMiddleware","thunkMiddleware","firebaseReducerProps","config","userProfile","dispatch","AppWrapper","styled","div","AppHeader","header","section","ChatInputFooter","ChatInputControl","ChatInputSection","textareaRef","SlickButtonWrapper","button","SlickButton","props","selectUser","ChatInput","useFirebase","useSelector","useState","messageText","setMessageText","postMessage","timestamp","message","text","Date","now","Math","floor","focus","push","onKeyUp","event","trim","key","shiftKey","onChange","target","value","maxRows","inputRef","node","autoFocus","style","fontSize","height","disabled","onClick","preventDefault","icon","faPaperPlane","ChatHistorySection","ChatList","ul","LoadingMessage","ChatMessageItem","li","ChatMessageHeader","ChatMessageTimestamp","span","ChatMessage","React","memo","children","color","locale","unix","fromNow","randomColor","require","init","selectMessages","ordered","ChatHistory","useFirebaseConnect","messagesEndRef","useRef","chatListRef","useEffect","current","scrollIntoView","behavior","block","colorCache","isLoaded","ref","map","luminosity","seed","SetUserSection","SetUser","hasError","setHasError","userInputRef","useDispatch","marginTop","marginBottom","onSubmit","val","length","padding","border","borderRadius","faSignInAlt","App","faUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3981cf4.chunk.js","sourcesContent":["import { SET_USER } from './actions';\nimport { AppState } from './types';\n\ninterface SET_USER_ACTION {\n  type: typeof SET_USER;\n  user: string;\n}\nconst initialState: AppState = {\n  user: ''\n};\n\nconst appReducer = (\n  state: AppState = initialState,\n  action: SET_USER_ACTION\n) => {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        user: action.user\n      };\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n","export const SET_USER = 'SET_USER';\n","import { POST_MESSAGE } from './actions';\r\nimport { ChatState } from './types';\r\n\r\ninterface POST_MESSAGE_ACTION {\r\n  type: typeof POST_MESSAGE;\r\n  text: string;\r\n}\r\nconst initialState: ChatState = {\r\n  messages: []\r\n};\r\n\r\nconst chatReducer = (\r\n  state: ChatState = initialState,\r\n  action: POST_MESSAGE_ACTION\r\n) => {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default chatReducer;\r\n","import { combineReducers } from 'redux';\nimport appReducer from './app/appReducer';\nimport chatReducer from './chat/chatReducer';\nimport { firebaseReducer } from 'react-redux-firebase';\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n  chat: chatReducer,\n  firebase: firebaseReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport firebase from 'firebase';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nconst firebaseReducerConfig = {\n  userProfile: 'users',\n};\nexport const firebaseReducerProps = {\n  firebase,\n  config: firebaseReducerConfig,\n  dispatch: store.dispatch,\n};\n","import styled from 'styled-components';\nimport { BG_COLOR } from './styles/Variables';\n\nexport const AppWrapper = styled.div`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  text-align: left;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const AppHeader = styled.header`\n  background-color: ${BG_COLOR};\n  padding: 0 2rem;\n  display: flex;\n  justify-content: space-between;\n  color: white;\n  h1,\n  div {\n    font-size: 2rem;\n    margin: 1rem 0;\n  }\n`;\n","export const BG_COLOR = '#282c34';\n","import styled from 'styled-components';\nimport { BG_COLOR } from '../../styles/Variables';\n\nexport const ChatInput = styled.section`\n  text-align: left;\n  width: 100%;\n`;\n\nexport const ChatInputFooter = styled.div`\n  background-color: ${BG_COLOR};\n  padding: 0.5rem 2rem;\n  color: #ccc;\n`;\nexport const ChatInputControl = styled.div`\n  display: flex;\n  justify-content: stretch;\n  textarea {\n    resize: none;\n    font-size: 1.6rem;\n    padding: 0.85rem 2rem;\n    flex: 1 0 0;\n  }\n`;\n\nexport const ChatInputSection = styled.section``;\n","import styled from 'styled-components';\n\nexport const SlickButtonWrapper = styled.button`\n  font-size: 1.6rem;\n  padding: 1rem 2rem;\n  background-color: #444;\n  border: none;\n  color: white;\n  transition-duration: 0.2s;\n  cursor: pointer;\n  &:hover {\n    background-color: #555;\n  }\n  &:active {\n    background-color: #666;\n  }\n  &:disabled {\n    opacity: 0.6;\n  }\n`;\n","import React, { useState } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { useFirebase } from 'react-redux-firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport {\n  ChatInputControl,\n  ChatInputFooter,\n  ChatInputSection,\n} from './ChatInput.styles';\nimport SlickButton from '../SlickButton/SlickButton.component';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../redux/types';\n\nconst timestampeMsToS = (timestamp: number) => Math.floor(timestamp / 1000);\nconst selectUser = (state: RootState) => state.app.user;\nlet textareaRef: any;\nconst ChatInput = () => {\n  const firebase = useFirebase();\n  const user = useSelector(selectUser);\n  const [messageText, setMessageText] = useState('');\n\n  const postMessage = () => {\n    const message = {\n      text: messageText,\n      user,\n      timestamp: timestampeMsToS(Date.now()),\n    };\n    setMessageText('');\n    if (textareaRef) {\n      textareaRef.focus();\n    }\n    return firebase.push('messages', message);\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    postMessage();\n  };\n  const handleChange = (event: any) => {\n    setMessageText(event.target.value);\n  };\n\n  const handleKeyUp = (event: any) => {\n    if (messageText.trim() !== '' && event.key === 'Enter' && event.shiftKey) {\n      postMessage();\n    }\n  };\n\n  return (\n    <ChatInputSection>\n      <ChatInputControl>\n        <TextareaAutosize\n          onKeyUp={handleKeyUp}\n          onChange={handleChange}\n          value={messageText}\n          maxRows={4}\n          inputRef={(node: HTMLTextAreaElement) => (textareaRef = node)}\n          autoFocus\n        />\n        <SlickButton\n          style={{ fontSize: '1.3rem', height: '4rem' }}\n          disabled={messageText.trim() === ''}\n          onClick={handleSubmit}>\n          <FontAwesomeIcon icon={faPaperPlane} />\n          &nbsp;送信\n        </SlickButton>\n      </ChatInputControl>\n      <ChatInputFooter>Chat footer</ChatInputFooter>\n    </ChatInputSection>\n  );\n};\n\nexport default ChatInput;\n","import React from 'react';\nimport { SlickButtonWrapper } from './SlickButton.styles';\n\nconst SlickButton = (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n  return <SlickButtonWrapper {...props}></SlickButtonWrapper>;\n};\n\nexport default SlickButton;\n","import styled from 'styled-components';\n\nexport const ChatHistorySection = styled.section`\n  padding: 0 2rem;\n  display: flex;\n  justify-content: flex-end;\n  flex-direction: column;\n  height: 100%;\n  overflow-y: auto;\n`;\nexport const ChatList = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  margin: 0;\n  height: 100%;\n  li {\n    padding: 1rem 0;\n    header {\n      font-weight: bold;\n      .timestamp {\n        font-weight: normal;\n      }\n    }\n  }\n`;\n\nexport const LoadingMessage = styled.div`\n  margin-bottom: 1rem;\n`;\n","import styled from 'styled-components';\n\nexport const ChatMessageItem = styled.li`\n  padding: 1rem 0;\n`;\n\nexport const ChatMessageHeader = styled.header`\n  font-weight: bold;\n`;\n\nexport const ChatMessageTimestamp = styled.span`\n  font-weight: normal;\n`;\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport {\r\n  ChatMessageItem,\r\n  ChatMessageHeader,\r\n  ChatMessageTimestamp,\r\n} from './ChatMessage.styles';\r\n\r\ntype ChatMessageProps = {\r\n  children: React.ReactNode;\r\n  user: string;\r\n  timestamp: number;\r\n  color: string;\r\n};\r\nconst ChatMessage = React.memo(\r\n  ({ children, user, timestamp, color }: ChatMessageProps) => {\r\n    return (\r\n      <ChatMessageItem>\r\n        <ChatMessageHeader>\r\n          <span\r\n            style={{\r\n              color,\r\n            }}>\r\n            {user}\r\n          </span>\r\n          &nbsp;\r\n          <ChatMessageTimestamp>\r\n            <Moment locale=\"ja\" unix fromNow>\r\n              {timestamp}\r\n            </Moment>\r\n          </ChatMessageTimestamp>\r\n        </ChatMessageHeader>\r\n        <pre>{children}</pre>\r\n      </ChatMessageItem>\r\n    );\r\n  }\r\n);\r\n\r\nexport default ChatMessage;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  ChatList,\r\n  ChatHistorySection,\r\n  LoadingMessage,\r\n} from './ChatHistory.styles';\r\nimport ChatMessage from './ChatMessage/ChatMessage.component';\r\nimport { useSelector } from 'react-redux';\r\nimport { useFirebaseConnect, isLoaded } from 'react-redux-firebase';\r\nimport { RootState, Message } from '../../redux/types';\r\nvar randomColor = require('randomcolor');\r\n\r\ntype FirebaseMessage = {\r\n  key: string;\r\n  value: Message;\r\n};\r\n\r\nlet init = false;\r\nconst selectMessages = (state: RootState) => state.firebase.ordered.messages; // todo TSnpm\r\nconst ChatHistory = () => {\r\n  useFirebaseConnect(['messages']);\r\n  const messages: FirebaseMessage[] = useSelector(selectMessages);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const chatListRef = useRef<HTMLUListElement>(null);\r\n  useEffect(() => {\r\n    if (!messagesEndRef.current) return;\r\n\r\n    messagesEndRef.current.scrollIntoView({\r\n      behavior: init ? 'smooth' : 'auto',\r\n      block: 'end',\r\n    });\r\n    init = true;\r\n  }, [messages]);\r\n  const colorCache: any = {};\r\n  return (\r\n    <ChatHistorySection>\r\n      {isLoaded(messages) ? (\r\n        <ChatList ref={chatListRef}>\r\n          {messages\r\n            ? messages.map(({ key, value: { user, text, timestamp } }) => {\r\n                if (!(user in colorCache)) {\r\n                  colorCache[user] = randomColor({\r\n                    luminosity: 'dark',\r\n                    seed: user,\r\n                  });\r\n                }\r\n                return (\r\n                  <ChatMessage\r\n                    key={key}\r\n                    user={user}\r\n                    timestamp={timestamp}\r\n                    color={colorCache[user]}>\r\n                    {text}\r\n                  </ChatMessage>\r\n                );\r\n              })\r\n            : null}\r\n          <div ref={messagesEndRef} />\r\n        </ChatList>\r\n      ) : (\r\n        <LoadingMessage>読み込み中...</LoadingMessage>\r\n      )}\r\n    </ChatHistorySection>\r\n  );\r\n};\r\n\r\nexport default ChatHistory;\r\n","import styled from 'styled-components';\n\nexport const SetUserSection = styled.section`\n  height: 100%;\n  margin-top: 2rem;\n  text-align: center;\n`;\n","import React, { useState, useRef, FormEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignInAlt } from '@fortawesome/free-solid-svg-icons';\nimport { SET_USER } from '../../redux/app/actions';\nimport SlickButton from '../SlickButton/SlickButton.component';\nimport { SetUserSection } from './SetUser.styles';\n\nconst SetUser = () => {\n  const [hasError, setHasError] = useState(false);\n  const userInputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!userInputRef.current) return;\n    const val = userInputRef.current.value;\n    if (!val || val.length === 0 || val.length > 30) {\n      setHasError(true);\n      return;\n    }\n    dispatch({\n      type: SET_USER,\n      user: val,\n    });\n  };\n  return (\n    <SetUserSection>\n      <h3 style={{ marginTop: 0, marginBottom: '1rem' }}>\n        ユーザー名を指定してください\n      </h3>\n      <form onSubmit={handleSubmit}>\n        <div style={{ marginBottom: '1rem' }}>\n          <input\n            autoFocus\n            ref={userInputRef}\n            style={{\n              fontSize: '2rem',\n              padding: '1rem',\n              border: 'solid 1px #999',\n              borderRadius: '5px',\n            }}\n            type=\"text\"\n          />\n        </div>\n        {hasError ? (\n          <div style={{ color: 'red' }}>\n            1~30文字のユーザー名を入力してください。\n          </div>\n        ) : null}\n        <div style={{ marginTop: '2rem' }}>\n          <SlickButton style={{ borderRadius: '5px' }} type=\"submit\">\n            <FontAwesomeIcon icon={faSignInAlt} />\n            &nbsp;ログイン\n          </SlickButton>\n        </div>\n      </form>\n    </SetUserSection>\n  );\n};\n\nexport default SetUser;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { AppWrapper, AppHeader } from './App.styles';\r\nimport { RootState } from './redux/types';\r\nimport ChatInput from './components/ChatInput/ChatInput.component';\r\nimport ChatHistory from './components/ChatHistory/ChatHistory.component';\r\nimport SetUser from './components/SetUser/SetUser.component';\r\n\r\nconst selectUser = (state: RootState) => state.app.user;\r\nconst App = () => {\r\n  const user = useSelector(selectUser);\r\n  return (\r\n    <AppWrapper>\r\n      <AppHeader>\r\n        <h1>SlickChat</h1>\r\n        {user ? (\r\n          <div>\r\n            <FontAwesomeIcon icon={faUser} />\r\n            &nbsp;{user}\r\n          </div>\r\n        ) : null}\r\n      </AppHeader>\r\n      {user ? (\r\n        <>\r\n          <ChatHistory></ChatHistory>\r\n          <ChatInput></ChatInput>\r\n        </>\r\n      ) : (\r\n        <SetUser></SetUser>\r\n      )}\r\n    </AppWrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { firebaseReducerProps } from './redux/store';\nimport './index.css';\nimport { store } from './redux/store';\nimport App from './App';\nimport 'moment/locale/ja';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...firebaseReducerProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}